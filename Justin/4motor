// This alternate version of the code does not require
// atomic.h. Instead, interrupts() and noInterrupts() 
// are used. Please use this code if your 
// platform does not support ATOMIC_BLOCK.

// Pins
#include "CytronMotorDriver.h"
#define ENCA1 2
#define ENCB1 4
#define ENCA2 3
#define ENCB2 5 
#define ENCA3 18
#define ENCB3 17
#define ENCA4 19
#define ENCB4 16
#define PWM1  23
#define INI1  22
#define PWM2  25
#define INI2  24
#define PWM3  27
#define INI3  26
#define PWM4  29
#define INI4  28

CytronMD motor1(PWM_DIR, 23, 22);
CytronMD motor2(PWM_DIR, 25 ,24);
CytronMD motor3(PWM_DIR, 27,26);
CytronMD motor4(PWM_DIR,  29,28);
// globals
long prevT = 0;
int posPrev1 = 0;
int posPrev2=0;
int posPrev3=0;
int posPrev4=0;
// Use the "volatile" directive for variables
// used in an interrupt
volatile int pos_i1=0;
volatile int pos_i2=0;
volatile int pos_i3=0;
volatile int pos_i4=0;

float v1Filt = 0;
float v1Prev = 0;
float v2Filt = 0;
float v2Prev = 0;
float v3Filt = 0;
float v3Prev = 0;
float v4Filt = 0;
float v4Prev = 0;


float e1integral = 0;
float e2integral = 0;
float e3integral = 0;
float e4integral = 0;

void setup() {
  Serial.begin(115200);

  pinMode(ENCA1,INPUT);
  pinMode(ENCB1,INPUT);
  pinMode(PWM1,OUTPUT);
  pinMode(INI1,OUTPUT);

  pinMode(ENCA2,INPUT);
  pinMode(ENCB2,INPUT);
  pinMode(PWM2,OUTPUT);
  pinMode(INI2,OUTPUT);

  pinMode(ENCA3,INPUT);
  pinMode(ENCB3,INPUT);
  pinMode(PWM3,OUTPUT);
  pinMode(INI3,OUTPUT);

  pinMode(ENCA4,INPUT);
  pinMode(ENCB4,INPUT);
  pinMode(PWM4,OUTPUT);
  pinMode(INI4,OUTPUT);
  
  attachInterrupt(digitalPinToInterrupt(ENCA1),
                  readEncoder1,RISING);
  attachInterrupt(digitalPinToInterrupt(ENCA2),
                  readEncoder2,RISING);
  attachInterrupt(digitalPinToInterrupt(ENCA3),
                  readEncoder3,RISING);
  attachInterrupt(digitalPinToInterrupt(ENCA4),
                  readEncoder4,RISING);
}

void loop() {

  // read the position and velocity
  int pos1 =0;
  int pos2 =0;
  int pos3=0;
  int pos4=0;
  noInterrupts(); // disable interrupts temporarily while reading
  pos1=pos_i1;
  pos2= pos_i2;
  pos3=pos_i3;
  pos4=pos_i4;
  interrupts(); // turn interrupts back on

  // Compute velocity with method 1
  long currT = micros();
  float deltaT = ((float) (currT-prevT))/1.0e6;
  float velocity1 = (pos1- posPrev1)/deltaT;
  float velocity2 = (pos2- posPrev2)/deltaT;
  float velocity3 = (pos3- posPrev3)/deltaT;
  float velocity4 = (pos4- posPrev4)/deltaT;
  posPrev1 = pos1;
  posPrev2 = pos2;
  posPrev3 = pos3;
  posPrev4 = pos4;
  prevT = currT;

  // Convert count/s to RPM
  float v1 = velocity1/600.0*60.0;
  float v2 = velocity2/600.0*60.0;
  float v3 = velocity3/600.0*60.0;
  float v4 = velocity4/600.0*60.0;
  // Low-pass filter (25 Hz cutoff)
  v1Filt = 0.854*v1Filt + 0.0728*v1 + 0.0728*v1Prev;
  v1Prev = v1;
  
  v2Filt = 0.854*v2Filt + 0.0728*v2 + 0.0728*v2Prev;
  v2Prev = v2;
  
  v3Filt = 0.854*v3Filt + 0.0728*v3 + 0.0728*v3Prev;
  v3Prev = v3;
  
  v4Filt = 0.854*v4Filt + 0.0728*v4 + 0.0728*v4Prev;
  v4Prev = v4;

  // Set a target
  float vt1 = 50;
  float vt2 = 50;
  float vt3 = 50;
  float vt4 = 50;

  // Compute the control signal u
  float kp = 10;
  float ki = 100;
  float e1 =-v1Filt+vt1;
  float e2 = -v2Filt+vt2;
  float e3 = -v3Filt+vt3;
  float e4 = -v4Filt+vt4;
  e1integral = e1integral + e1*deltaT;
  e2integral = e2integral + e2*deltaT;
  e3integral = e3integral + e3*deltaT;
  e4integral = e4integral + e4*deltaT;
  float u1 = kp*e1 + ki*e1integral;
  float u2 = kp*e2 + ki*e2integral;
  float u3 = kp*e3 + ki*e3integral;
  float u4 = kp*e4 + ki*e4integral;

  // Set the motor speed and direction
  int dir1 = 1;
  int dir2 = 1;
  int dir3 = 1;
  int dir4 = 1;
  
  if (u1<0){
    dir1 = -1;
  }
  int pwr1 = (int) fabs(u1);
  if(pwr1 > 255){
    pwr1 = 255;
  }
  if (u2<0){
    dir2 = -1;
  }
  int pwr2 = (int) fabs(u2);
  if(pwr2 > 255){
    pwr2 = 255;
  }
  if (u3<0){
    dir3 = -1;
  }
  int pwr3 = (int) fabs(u3);
  if(pwr3 > 255){
    pwr3 = 255;
  }
  if (u4<0){
    dir4 = -1;
  }
  int pwr4 = (int) fabs(u4);
  if(pwr4 > 255){
    pwr4 = 255;
  }
  setMotor1(dir1,pwr1,INI1);
  setMotor2(dir2,pwr2,INI2);
  setMotor3(dir3,pwr3,INI3);
  setMotor4(dir4,pwr4,INI4);

  Serial.print(vt1);
  Serial.print(" ");
  Serial.print(dir1);
  Serial.print(" ");
  Serial.print(pwr1);
  Serial.print(" ");
  Serial.print(e1);

  Serial.println();
  delay(1);
}

void setMotor1(int dir1, int pwmVal,  int in1){
  motor1.setSpeed(pwmVal);  // Motor speed
  if(dir1 == 1){ 
    // Turn one way
    digitalWrite(in1,HIGH);
  }
  else if(dir1 == -1){
    // Turn the other way
    digitalWrite(in1,LOW);
  }
  
}
void setMotor2(int dir2, int pwmVal,  int in1){
  motor2.setSpeed(pwmVal);  // Motor speed
  if(dir2 == 1){ 
    // Turn one way
    digitalWrite(in1,HIGH);
  }
  else if(dir2 == -1){
    // Turn the other way
    digitalWrite(in1,LOW);
  }
  
}
void setMotor3(int dir3, int pwmVal,  int in1){
  motor3.setSpeed(pwmVal);  // Motor speed
  if(dir3 == 1){ 
    // Turn one way
    digitalWrite(in1,HIGH);
  }
  else if(dir3 == -1){
    // Turn the other way
    digitalWrite(in1,LOW);
  }
  
}
void setMotor4(int dir4, int pwmVal,  int in1){
  motor4.setSpeed(pwmVal);  // Motor speed
  if(dir4 == 1){ 
    // Turn one way
    digitalWrite(in1,HIGH);
  }
  else if(dir4 == -1){
    // Turn the other way
    digitalWrite(in1,LOW);
  }
  
}

void readEncoder1(){
  // Read encoder B when ENCA rises
  int b = digitalRead(ENCB1);
  int increment = 0;
  if(b>0){
    // If B is high, increment forward
    increment = 1;
  }
  else{
    // Otherwise, increment backward
    increment = -1;
  }
  pos_i1 = pos_i1 + increment;

}


void readEncoder2(){
  // Read encoder B when ENCA rises
  int b = digitalRead(ENCB2);
  int increment = 0;
  if(b>0){
    // If B is high, increment forward
    increment = 1;
  }
  else{
    // Otherwise, increment backward
    increment = -1;
  }
  pos_i2 = pos_i2 + increment;

}


void readEncoder3(){
  // Read encoder B when ENCA rises
  int b = digitalRead(ENCB3);
  int increment = 0;
  if(b>0){
    // If B is high, increment forward
    increment = 1;
  }
  else{
    // Otherwise, increment backward
    increment = -1;
  }
  pos_i3 = pos_i3 + increment;

}


void readEncoder4(){
  // Read encoder B when ENCA rises
  int b = digitalRead(ENCB4);
  int increment = 0;
  if(b>0){
    // If B is high, increment forward
    increment = 1;
  }
  else{
    // Otherwise, increment backward
    increment = -1;
  }
  pos_i4 = pos_i4 + increment;
